<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computing | PND4]]></title>
  <link href="http://pnd4.github.io/blog/categories/computing/atom.xml" rel="self"/>
  <link href="http://pnd4.github.io/"/>
  <updated>2014-04-20T06:06:05-07:00</updated>
  <id>http://pnd4.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    <email><![CDATA[kevin@pnd4.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimizing a Pogoplug]]></title>
    <link href="http://pnd4.github.io/blog/2014/04/20/optimizing-a-pogoplug/"/>
    <updated>2014-04-20T04:46:00-07:00</updated>
    <id>http://pnd4.github.io/blog/2014/04/20/optimizing-a-pogoplug</id>
    <content type="html"><![CDATA[<p><strong> Here&rsquo;s a few tips on how to maximize your performance when using an embedded device like Pogoplug, RaspberryPi, etc. </strong></p>

<h4>Flash-Drive I/O</h4>

<p>Flash memory is cheap and small. Most even have enough storage space that you can house your <code>ROOTFS</code> pretty comfortably. The downside is pretty sluggish reads/writes. Fortunately the pogoplug has 256MB&rsquo;s of RAM; By allocating some commonly written directories in RAM we gain speed plus the benefit of less write-cycles overall to our flash-memory. If you don&rsquo;t already know, flash memory has a limited number of writes, so this effectively prolongs the life of your drive/system.</p>

<p>Simply add/replace the appropriate lines to <code>fstab</code> ..</p>

<p><code>
tmpfs /tmp         tmpfs nodev,nosuid,noatime           0 0
tmpfs /var/tmp     tmpfs nodev,nosuid,noatime           0 0
tmpfs /var/log     tmpfs nodev,nosuid,noatime,size=20M  0 0
tmpfs /var/run     tmpfs defaults,noatime,size=1M       0 0
tmpfs /var/lock    tmpfs defaults,noatime,size=1M       0 0
</code></p>

<h4>I/O Governor</h4>

<p>The logic that is behind your drive/disk access can be tweaked reducing lag by appending the following line to <code>/etc/rc.local</code></p>

<p><code>ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article
echo deadline &gt; /sys/block/sda/queue/scheduler
</code></p>

<p>Note That I donâ€™t use the <code>noop</code> scheduler because <code>deadline</code> can be better as it group small accesses, which improve latency. The default, <code>cfq</code> is better suited for disk-drives.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dual-Monitor Toggle]]></title>
    <link href="http://pnd4.github.io/blog/2014/04/03/dual-monitor-toggle/"/>
    <updated>2014-04-03T02:07:00-07:00</updated>
    <id>http://pnd4.github.io/blog/2014/04/03/dual-monitor-toggle</id>
    <content type="html"><![CDATA[<p><em>Recently I found myself in need of a way to switch X into single-monitor mode without having to kill the running instance of X, which is fine if you don&rsquo;t have any unsaved work, since it crashes all programs running within X as well.</em></p>

<h2>xrandr</h2>

<p>Using <code>xrandr</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> we are able to dynamically modify our desktop&rsquo;s properties.</p>

<p><strong>OFF</strong></p>

<p><code>
xrandr --output DVI-0 --off
</code></p>

<p><strong>ON</strong></p>

<p><code>
xrandr --output DVI-0 --left-of VGA-0 --auto
</code></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.x.org/archive/X11R7.5/doc/man/man1/xrandr.1.html">Xrandr&rsquo;s Man Page</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVPN Hang Issue]]></title>
    <link href="http://pnd4.github.io/blog/2013/12/05/ovpn-hang/"/>
    <updated>2013-12-05T00:00:00-08:00</updated>
    <id>http://pnd4.github.io/blog/2013/12/05/ovpn-hang</id>
    <content type="html"><![CDATA[<h1>Problem</h1>

<p>CyberGhostVPN connection hangs on service start-up
Doesnt</p>

<h1>Investigation</h1>

<h4>DNS</h4>

<p><strong>Dec 05 2013 &ndash; 04:38</strong></p>

<p>Seems CyberGhost uses a constantly renewing IP.. &ldquo;US.openvpn.cyberghostvpn.com&rdquo; resolved to at least 3 different IPs over the last 1-2 hrs. This caused the daemon to start up, fail because of something regarding the certificate, then repeatedly fail resolving until manually stopping the daemon.</p>

<p>The thread below talks about tuning openvpn to fix this.</p>

<blockquote><p>By default, on initial startup and restart, the &mdash;remote name is resolved
once. If the DNS resolve fails, OpenVPN will abort.</p>

<p>If &mdash;resolve-retry is specified, the DNS resolve will be retried for n
seconds. After n seconds, if the DNS lookup has not been successful, OpenVPN
will abort. Recent versions of OpenVPN allow n to be &ldquo;infinite&rdquo;.</p>

<p>If you want to disable the DNS re-resolve on restart, you can use
&mdash;persist-remote-ip. This will &ldquo;recycle&rdquo; the previously used &mdash;remote IP
address without doing a new DNS lookup.</p></blockquote>

<p><a href="http://osdir.com/ml/network.openvpn.user/2004-02/msg00130.html">OVPN Resolve-Retry and Ping-Restart</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLI RTMP Streaming]]></title>
    <link href="http://pnd4.github.io/blog/2013/11/23/rtmpdump/"/>
    <updated>2013-11-23T00:00:00-08:00</updated>
    <id>http://pnd4.github.io/blog/2013/11/23/rtmpdump</id>
    <content type="html"><![CDATA[<p>As of 2013, some streams require the &lsquo;ksv&rsquo;/&lsquo;k-s-v&rsquo; patch.. Arch users can use <strong>rtmpdump-ksv</strong> instead of <strong>rtmpdump</strong></p>

<h3>Commands</h3>

<p>Redirect rtmp port using iptables.</p>

<pre><code>sudo iptables -t nat -A OUTPUT -p tcp --dport 1935 -j REDIRECT
</code></pre>

<p>Sniffing for stream parameters.</p>

<pre><code>rtmpsrv
</code></pre>

<p>Once you&rsquo;ve captured a stream, you can undo the redirection.</p>

<pre><code>sudo iptables -t nat -D OUTPUT -p tcp --dport 1935 -j REDIRECT
</code></pre>

<p>Use rtmpdump like so, piping the output to mplayer/vlc</p>

<pre><code>rtmpdump -q -r "rtmpe://origin.hdcast.org:1935/redirect/" -a "redirect/" -f "LNX 11,9,900,152" -W "http://www.udemy.com/static/flash/player5.9.swf" -p "http://www.hdcast.org/embedlive2.php?u=ban5&amp;vw=640&amp;vh=460&amp;domain=www.btsportshd.com" -y "ban5" -b "10000" -v | mplayer -really-quiet -framedrop -
</code></pre>

<h4>Important options</h4>

<p>rtmpdump</p>

<ul>
<li>-r [tcURL ex. &ldquo;rtmp://stream.url/&rdquo;]</li>
<li>-a [app ex. &ldquo;redirect/&rdquo;</li>
<li>-y [playpath ex. &ldquo;freetv4&rdquo;]</li>
<li>-v [live]</li>
<li>-b [buffersize ex. &ldquo;10000&rdquo;]</li>
<li>-W [swfURL ex. &ldquo;<a href="http://stream.url/flash/player5.9.swf">http://stream.url/flash/player5.9.swf</a>&rdquo;]</li>
</ul>


<p>mplayer</p>

<ul>
<li>-really-quiet [Suppresses output.]</li>
<li>-framedrop [Helps with streams.]</li>
<li><ul>
<li>[Plays from stdout.]</li>
</ul>
</li>
</ul>


<h4>Port redirect helper script</h4>

<p>I wrote a bash script that takes the hard part, remembering, out of the <strong>iptables</strong> step.</p>

<p>{% highlight bash %}</p>

<h1>!/bin/bash</h1>

<h2>PND4</h2>

<h2>o1.27.13</h2>

<p>success() {
  echo &ldquo;.. success :)&rdquo;
}</p>

<p>failure() {
  echo &ldquo;&mdash; FAILURE :(&rdquo;
}</p>

<p>add-rule() {
  sudo iptables -t nat -A OUTPUT -p tcp &mdash;dport 1935 -j REDIRECT
}</p>

<p>del-rule() {
  sudo iptables -t nat -D OUTPUT -p tcp &mdash;dport 1935 -j REDIRECT
}</p>

<p>case &ldquo;$1&rdquo; in
  start)</p>

<pre><code>echo "Starting.."
# also delete rule if it exists for some reason to avoid dupes.
# always errors out so we ignore it
del-rule 2&gt;/dev/null
add-rule
[ $? -eq 0 ] &amp;&amp; success || failure
;;
</code></pre>

<p>  stop)</p>

<pre><code>echo "Stopping.."
del-rule
[ $? -eq 0 ] &amp;&amp; success || failure
;;
</code></pre>

<p>  *)</p>

<pre><code>echo "Usage: $0 &lt;start|stop&gt;"
;;
</code></pre>

<p>esac
{% endhighlight %}</p>

<h4>Useful Links and References</h4>

<ol>
<li><a href="http://stream-recorder.com/forum/tutorial-simply-use-rtmpsrv-and-example-t6325.html?p=18142">rtmpsrv tutorial</a></li>
<li><a href="http://trac.xbmc.org/ticket/14089">XBMC: hint on buffer option</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Motion Webcam]]></title>
    <link href="http://pnd4.github.io/blog/2013/11/11/motion-webcam/"/>
    <updated>2013-11-11T00:00:00-08:00</updated>
    <id>http://pnd4.github.io/blog/2013/11/11/motion-webcam</id>
    <content type="html"><![CDATA[<h3>Webcam Prices</h3>

<p>[as of 11.11.2013]</p>

<ul>
<li>20-23 HD-3000</li>
<li>15-20 Rocketfish 720p RF-HDWEB</li>
<li>17 M$ HD-2300</li>
</ul>


<h3><a href="http://forum.micasaverde.com/index.php?topic=9104.15">RasPi Notes</a></h3>

<p>RasPi community has good info on the subject. Should be valid for Pogoplugs too.</p>

<blockquote><p>A few recommendations I have for streaming USB webcams with linux:</p>

<ol>
<li><p>Unless you need the capabilities of motion (that is, you are using the motion detection built in to motion) use mjpg_streamer instead of motion. Motion processes each image to see if pixels have changed, and by default runs a lot of binary morphology on the images (erode, dilate, etc), where mjpg_streamer just streams. On my Pogoplus with four cameras this means the difference between 60%+ cpu utilization versus single digits (and to get down to 60% I had to drop the framerate to 2Hz and go through a bunch of options to turn off as much processing as possible). I have another machine running zoneminder which processes my streams which is why I don&rsquo;t mind forgoing motion detection.</p></li>
<li><p>Use MJPEG instead of YUV
If you want multiple webcams on a single USB bus this is basically a necessity. Even if you don&rsquo;t it means a lot less data to process. This is the default in mjpg_streamer, in motion set: &ldquo;v4l2_palette 2&rdquo; in motion.conf</p></li>
<li><p>Get a webcam with known support
Some webcams have a problem where the request a lot more bandwidth than they need and this means you can&rsquo;t use two at the same time. There is a hack to get around this in YUV mode, but not MJPEG which isn&rsquo;t much of a help. If you are up for hacking the driver yourself it should be possible to skip the BW check and make these work anyway, but that is quite a bit of work.</p></li>
</ol>


<p>Cameras that work simultaneously (no bandwidth bug):
-Logitech C120
-Logitech C160
-Logitech B500
-Logitech Quickcam E 3500
-Logitech Quickcam Messenger
-Microsoft HD-3000
-Microsoft HD-5000
-Rocketfish HD Webcam Pro</p>

<p>Cameras that do not work in multiples (bandwidth bug?):
-Logitech C110
-Logitech C310
-Creative Live! Cam Video IM Ultra
-HP 2-Megapixel Webcam (RZ406AA)</p>

<p>My current recommendation is probably the HD-3000. It is 720p and can be found for about $20. It does NOT have autofocus which I think is good for a webcam you leave running 24/7. I tried the HD-5000 and it spends a lot of time refocusing. I&rsquo;m afraid it would break after a few weeks. The C160 is currently the cheapest, about $8 shipped on ebay. Meritline sometimes sells it for $6. The irritating thing about the c120/c160 is that they have a focusing ring you have to adjust. For a security camera I would prefer fixed focus. I buy any webcam I can get at a firesale so I&rsquo;ll keep trying more &ndash; I would appreciate results from anyone else as well.</p>

<p>EDIT: Added a few more cameras]</p>

<p>It turns out you can disable autofocus on UVC supported webcams like this:</p>

<p>v4l2-ctl &mdash;verbose &mdash;set-ctrl=focus_auto=0</p>

<p>At least it works for me on all the AF cameras I have to test (Microsoft &amp; Rocketfish).</p>

<p>Not only is this a good idea for camera longevity (I would think so at least) it helps prevents false motion alarms.</p></blockquote>

<h4>Useful Links and References</h4>

<ol>
<li><a href="http://elinux.org/RPi_USB_Webcams">eLinux: RasPi Webcam compatibility list</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
